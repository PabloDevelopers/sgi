# Multi-stage Dockerfile optimizado para Laravel + Inertia.js + Wayfinder

# Stage 1: Preparar dependencias de PHP y generar configuración para wayfinder
FROM php:8.3-fpm AS php-base

# Instalar dependencias del sistema y extensiones PHP
RUN apt-get update && apt-get install -y \
    git curl unzip libpq-dev libonig-dev libzip-dev zip \
    && docker-php-ext-install pdo pdo_mysql mbstring zip \
    && rm -rf /var/lib/apt/lists/*

# Instalar Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /var/www

# Copiar archivos de configuración de PHP primero
COPY composer.json composer.lock ./
COPY artisan ./

# Instalar dependencias de PHP
RUN composer install --no-dev --no-scripts --no-autoloader --prefer-dist

# Copiar el resto del código PHP
COPY app app/
COPY bootstrap bootstrap/
COPY config config/
COPY database database/
COPY routes routes/
COPY storage storage/
COPY resources/views resources/views/

# Generar autoloader
RUN composer dump-autoload --no-dev --optimize

# Configurar variables de entorno mínimas para que Laravel funcione
ENV APP_ENV=production
ENV APP_KEY=base64:test
ENV DB_CONNECTION=mysql
ENV DB_HOST=127.0.0.1
ENV DB_PORT=3306
ENV DB_DATABASE=test
ENV DB_USERNAME=test
ENV DB_PASSWORD=test

# Stage 2: Build del frontend con Node.js
FROM node:22 AS frontend

# Instalar pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copiar archivos de configuración de Node.js
COPY package.json pnpm-lock.yaml ./
COPY tsconfig.json vite.config.ts eslint.config.js components.json ./

# Instalar dependencias de Node.js
RUN pnpm install --frozen-lockfile

# Copiar recursos frontend
COPY resources/js resources/js/
COPY resources/css resources/css/

# Copiar configuración PHP necesaria para wayfinder desde el stage anterior
COPY --from=php-base /var/www/routes routes/
COPY --from=php-base /var/www/app app/
COPY --from=php-base /var/www/config config/
COPY --from=php-base /var/www/bootstrap bootstrap/
COPY --from=php-base /var/www/vendor vendor/
COPY --from=php-base /var/www/artisan artisan

# Variables de entorno necesarias para el build
ENV APP_ENV=production
ENV APP_URL=http://localhost
ENV APP_KEY=base64:test

# Crear archivo .env mínimo para que Laravel funcione durante el build
RUN echo "APP_NAME=SGI" > .env && \
    echo "APP_ENV=production" >> .env && \
    echo "APP_KEY=base64:test" >> .env && \
    echo "APP_DEBUG=false" >> .env && \
    echo "APP_TIMEZONE=UTC" >> .env && \
    echo "APP_URL=http://localhost" >> .env && \
    echo "DB_CONNECTION=mysql" >> .env && \
    echo "DB_HOST=127.0.0.1" >> .env && \
    echo "DB_PORT=3306" >> .env && \
    echo "DB_DATABASE=test" >> .env && \
    echo "DB_USERNAME=test" >> .env && \
    echo "DB_PASSWORD=test" >> .env

# Build del frontend
RUN pnpm build

# Stage 3: Imagen final de producción
FROM richarvey/nginx-php-fpm:3.1.6

# Configuración de imagen
ENV SKIP_COMPOSER=1
ENV WEBROOT=/var/www/html/public
ENV PHP_ERRORS_STDERR=1
ENV RUN_SCRIPTS=1
ENV REAL_IP_HEADER=1

# Configuración Laravel
ENV APP_ENV=production
ENV APP_DEBUG=false
ENV LOG_CHANNEL=stderr

# Permitir composer como root
ENV COMPOSER_ALLOW_SUPERUSER=1

# Copiar código PHP
COPY --from=php-base /var/www /var/www/html

# Copiar assets compilados del frontend
COPY --from=frontend /app/public/build /var/www/html/public/build

# Copiar archivos públicos
COPY public /var/www/html/public

# Ajustar permisos
RUN chown -R nginx:nginx /var/www/html && \
    chmod -R 755 /var/www/html/storage && \
    chmod -R 755 /var/www/html/bootstrap/cache

CMD ["/start.sh"]